# Objects

Now we're getting back to what I remember from CSII in college. Let's start by recapping
objects in general.

-   Objects are non-primitive data types
-   Objects are passed by reference
    -   Passing by reference means we're point to
        a location in memory
    -   This means that objects are, essentially,
        always mutable
-   Objects can store any data, for example:

```javascript
// Code snippet
const person = {
    height: "6 feet",
    weight: "160 pounds",
    hairColor: "brown",
    eyeColor: "blue",
    bloodType: "O+",
};
```

This above code example abstracts the 'person' data structure into a set of
key:value pairs and can be accessed with 'dot' notation or 'bracket' notation.

```javascript
console.log(person.height);
console.log(person.[hairColor]);
```

## 'this' Keyword

To access properties within the scope of an object, we need to use the 'this' keyword
in any function calls or other references to properties within the same object.

```javascript
const person = {
    height: "6 feet",
    weight: "160 pounds",
    hairColor: "brown",
    eyeColor: "blue",
    bloodType: "O+",
    greeting: "hey!",
    hello() {
        console.log(this.greeting);
    },
};
person.hello();
```

Another example:

```javascript
const robot = {
    model: "1E78V2",
    energyLevel: 100,
    provideInfo() {
        return `I am ${this.model} and my current energy level is ${this.energyLevel}`;
    },
};

console.log(robot.provideInfo());
```

## Arrow Function and 'this'

Arrow functions mean that we don't need to reference 'this' in a function call within the scope
of our object. The below is an example of what happens when we try to call this on an arrow function:

```javascript
const goat = {
    dietType: "herbivore",
    makeSound() {
        console.log("baaa");
    },
    diet: () => {
        console.log(this.dietType);
    },
};

goat.diet(); // Prints undefined
```

## 